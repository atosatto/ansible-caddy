---

- name: Set the Github releases API endpoint
  set_fact:
    _caddy_github_api_url: |-
      {% if caddy_release_tag == 'latest' %}
      https://api.github.com/repos/mholt/caddy/releases/latest
      {% else %}
      https://api.github.com/repos/mholt/caddy/releases/tags/{{ caddy_release_tag }}
      {% endif %}

- name: Fetch the latest Caddy release information from Github
  uri:
    url: "{{ _caddy_github_api_url }}"
    method: GET
  register: _caddy_github_release
  until: _caddy_github_release.status == 200
  retries: 5
  delay: 15

- name: Get Caddy's latest release tag
  set_fact:
    caddy_release_tag: "{{ _caddy_github_release['json'] | json_query('tag_name') }}"
  when: caddy_release_tag == "latest"

- name: Set the name of the Caddy release artifact
  set_fact:
    _caddy_release_build: "{{ hostvars[inventory_hostname] | caddy_release_build(caddy_release_tag) }}"

- name: Make sure the Caddy downlaod directory exists
  file:
    dest: "{{ caddy_install_path }}/{{ _caddy_release_build }}"
    state: directory

- name: Download Caddy
  unarchive:
    src: "{{ _caddy_github_release['json'] | json_query(_caddy_release_asset_url_query) }}"
    dest: "{{ caddy_install_path }}/{{ _caddy_release_build }}"
    creates: "{{ caddy_install_path }}/{{ _caddy_release_build }}/caddy"
    remote_src: yes
  vars:
    _caddy_release_asset_url_query: "assets[?name=='{{ _caddy_release_build }}.tar.gz'] | [0].browser_download_url"

- name: Make sure the Caddy installation directory exists
  file:
    dest: "{{ caddy_install_path }}"
    state: directory

- name: Symlink the Caddy binaries
  file:
    src: "{{ caddy_install_path }}/{{ _caddy_release_build }}/caddy"
    dest: "{{ caddy_bin_path }}/caddy"
    state: link
  with_items:
    - caddy

- name: Create the Caddy group
  group:
    name: "{{ caddy_group }}"
    system: true
    state: present

- name: Create the Caddy user
  user:
    name: "{{ caddy_user }}"
    group: "{{ caddy_group }}"
    home: "{{ caddy_web_root }}"
    shell: "/usr/sbin/nologin"
    system: yes
